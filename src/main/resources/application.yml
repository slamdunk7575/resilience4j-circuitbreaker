spring:
  application.name: resilience4j-circuitbreaker

server:
  port: 8080

# Retry 설정
resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 1000
      retryExceptions:
        - me.test.resilience4j.exception.RetryException   # retryExceptions 에 지정된 예외는 재시도
      ignoreExceptions:
        - me.test.resilience4j.exception.IgnoreException  # retryExceptions 에 지정되지 않은 예외는 ignoreExceptions 로 처리됨
  instances:
    simpleRetryConfig:
      baseConfig: default

# CircuitBreaker 설정
resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowType: COUNT_BASED
      minimumNumberOfCalls: 7                                   # 최소 7번 까지는 무조건 CLOSE 로 가정하고 호출한다.
      slidingWindowSize: 10                                     # (minimumNumberOfCalls 이후로는) 10개의 요청을 기준으로 판단한다.
      waitDurationInOpenState: 10s                              # OPEN 상태에서 HALF_OPEN 으로 가려면 얼마나 기다릴 것인가?

      failureRateThreshold: 40                                  # slidingWindowSize 중 몇 %가 recordException 이면 OPEN 으로 만들 것인가?

      slowCallDurationThreshold: 3000                           # 몇 ms 동안 요청이 처리되지 않으면 실패로 간주할 것인가?
      slowCallRateThreshold: 60                                 # slidingWindowSize 중 몇 %가 slowCall 이면 OPEN 으로 만들 것인가?

      permittedNumberOfCallsInHalfOpenState: 5                  # HALF_OPEN 상태에서 5번까지 요청을 한뒤 failureRateThreshold 설정에 따라 OPEN 또는 CLOSE 로 바뀔지 판단한다.
      automaticTransitionFromOpenToHalfOpenEnabled: true        # OPEN 상태에서 자동으로 HALF_OPEN 으로 갈 것인가?

      eventConsumerBufferSize: 10                               # actuator 를 위한 이벤트 버퍼 사이즈

      # recordExceptions 으로 등록시 주의사항
      # 유효성 검사나 NullPointerException 처럼 부하를 받는 것과 무관하게 데이터 자체
      # 귀찮아서 높은 수준의 예외 (Exception, RuntimeException) 는 등록하면 안됨

      # 다른 서버로 HTTP 요청시 예외를 던져주지 않는다면?
      # 예: 다른 서버로 HTTP 요청시 예외는 아니지만 502 Bad Gateway 로 응답하는 경우
      # 500 번대 응답인 경우 내가 예외를 임의로 던져서 등록

      # Slow Call 에만 의존하지 말기
      # 부하를 많이 받은 경우 적절한 Timeout 을 걸어줘서 요청을 빠르게 끊고 recordExceptions 카운트를 올려서 서킷을 OPEN
      # Timeout 과 Slow Call 차이점
      # Timeout 은 강제로 요청을 종료하지만 Slow Call 을 카운팅 하는건 요청 자체를 종료하지는 않음
      recordExceptions:
        - me.test.resilience4j.exception.RecordException
      ignoreExceptions:
        - me.test.resilience4j.exception.IgnoreException
  instances:
    simpleCircuitBreakerConfig:
      baseConfig: default

management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always

management.health.diskspace.enabled: false
management.health.circuitbreakers.enabled: true

management:
  metrics:
    tags:
      application: ${spring.application.name}
  distribution:
    percentiles-histogram:
      http:
        server:
          requests: true
      resilience4j:
        calls: true
